AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: 'AWS CloudFormation Sample Template EC2InstanceWithSecurityGroupSample:
  Create an Amazon EC2 instance running the Debian AMI.'
Parameters:
  ### EC2 INSTANCE ###
  StageName:
    Type: String
    Default: Production
    Description: Stage
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    Default: challenge
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues: [t2.micro]
    ConstraintDescription: must be a valid EC2 instance type.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
  DBLocation:
    Description: The IP address range that can be used 3306 to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  AvailabilityZone:
    Type: String
    Default: sa-east-1a
  
  # VpcCIDR:
  #   Description: Please enter the IP range (CIDR notation) for this VPC
  #   Type: String
  #   Default: 10.192.0.0/16

  # PublicSubnetCIDR:
  #   Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
  #   Type: String
  #   Default: 10.192.11.0/24

  PrivateSubnetCIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 172.31.48.0/20
  
  PublicSubnetId:
    Description: Default Public Subnet ID
    Type: String
    Default: subnet-0e8d1c1f6a31976af
  VpcId:
    Description: Default VPC ID
    Type: String
    Default: vpc-03949decb6924db70

  InstancePort:
    Type: String
    Default: 80
    Description: The port on which the EC2 instance is listening

Resources:

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VpcId
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnetCIDR
      MapPublicIpOnLaunch: false

  NatGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnetId
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VpcId
  
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VpcId

  DefaultPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet

  NoIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "no-ingress-sg"
      GroupDescription: "Security group with no ingress rule"
      VpcId: !Ref VpcId
  ### EC2 INSTANCE ###

  Agent2EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref 'InstanceType'
      AvailabilityZone: !Ref AvailabilityZone
      Monitoring: true
      SecurityGroups: [!Ref 'AgentInstanceSecurityGroup']
      KeyName: !Ref 'KeyName'
      # SubnetId: !Ref 'PublicSubnetId'
      ImageId: 'ami-05331e0d9aa1b9f1c'
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            apt update -y
            apt install git python3-pip -y
            wget https://raw.githubusercontent.com/lisazevedo/compliance-continuous-monitoring/main/agent/requirements.txt
            pip3 install -r requirements.txt
            wget https://raw.githubusercontent.com/lisazevedo/compliance-continuous-monitoring/main/agent/agent.py

  Agent1EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref 'InstanceType'
      AvailabilityZone: !Ref AvailabilityZone
      SecurityGroups: [!Ref 'AgentInstanceSecurityGroup']
      KeyName: !Ref 'KeyName'
      Monitoring: true
      ImageId: 'ami-05331e0d9aa1b9f1c'
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            apt update -y
            apt install git python3-pip -y
            wget https://raw.githubusercontent.com/lisazevedo/compliance-continuous-monitoring/main/agent/requirements.txt
            pip3 install -r requirements.txt
            wget https://raw.githubusercontent.com/lisazevedo/compliance-continuous-monitoring/main/agent/agent.py
  ApiEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref 'InstanceType'
      AvailabilityZone: !Ref AvailabilityZone
      SecurityGroups: [!Ref 'ApiInstanceSecurityGroup']
      Monitoring: true
      KeyName: !Ref 'KeyName'
      ImageId: 'ami-05331e0d9aa1b9f1c'
      # SubnetId: !Ref PublicSubnetId
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            apt update -y
            apt-get install -y \
                ca-certificates \
                curl \
                git \
                gnupg \
                lsb-release
            mkdir -p /etc/apt/keyrings
            curl -fsSL https://download.docker.com/linux/debian/gpg |  gpg --dearmor -o /etc/apt/keyrings/docker.gpg
            echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \
            $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
            apt-get update -y
            apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin docker-compose
            groupadd docker
            usermod -aG docker $USER
            git clone https://github.com/lisazevedo/compliance-continuous-monitoring.git
            cd compliance-continuous-monitoring
            docker-compose up -d 

  ApiInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable 3306 PORT
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        CidrIp: !Ref 'PrivateSubnetCIDR'
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 172.31.0.0/20
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref 'SSHLocation'
  AgentInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref 'SSHLocation'
  ### EC2 INSTANCE SECURITY GROUP ###

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      Port: 80
      Protocol: TCP
      TargetType: instance
      Targets: 
        - Id: !Ref ApiEC2Instance
          Port: !Ref InstancePort
      VpcId: !Ref VpcId

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internal
      Subnets: 
        - !Ref PrivateSubnet
      #   # - !Ref PublicSubnetCSubnetId: !Ref PublicSubnetIDR
      Type: network

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      DefaultActions: 
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: TCP

  VpcLink:
    Type: AWS::ApiGateway::VpcLink
    Properties: 
      Name: vpc-link
      TargetArns: 
        - !Ref LoadBalancer

  #############################
  # API
  #############################

  Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref StageName
      Auth:
        # DefaultAuthorizer: MyAuthFunctions
        Authorizers:
          MyLambdaAuthorizer:
            FunctionArn: !GetAtt MyAuthFunctions.Arn
            FunctionPayloadType: TOKEN
            Identity:
              # Must specify at least one of
              # Headers, QueryStrings, StageVariables, or Context
              Headers:
                - authorizationToken
              ReauthorizeEvery: 100
      Cors:
        AllowMethods: "'GET,POST,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
      DefinitionBody:
        swagger: 2.0
        paths:
          /users:
            get:
              x-amazon-apigateway-integration:
                connectionId: !Ref VpcLink
                connectionType: VPC_LINK
                httpMethod: GET
                type: http_proxy
                uri: !Join ["", ["http://", !GetAtt LoadBalancer.DNSName, "/ec2_endpoint"]]
            post:
              x-amazon-apigateway-integration:
                connectionId: !Ref VpcLink
                connectionType: VPC_LINK
                httpMethod: POST
                type: http_proxy
                uri: !Join ["", ["http://", !GetAtt LoadBalancer.DNSName, "/ec2_endpoint"]]
          /cpus:
            get:
              x-amazon-apigateway-integration:
                connectionId: !Ref VpcLink
                connectionType: VPC_LINK
                httpMethod: GET
                type: http_proxy
                uri: !Join ["", ["http://", !GetAtt LoadBalancer.DNSName, "/ec2_endpoint"]]
            post:
              x-amazon-apigateway-integration:
                connectionId: !Ref VpcLink
                connectionType: VPC_LINK
                httpMethod: POST
                type: http_proxy
                uri: !Join ["", ["http://", !GetAtt LoadBalancer.DNSName, "/ec2_endpoint"]]
          /hosts:
            get:
              x-amazon-apigateway-integration:
                connectionId: !Ref VpcLink
                connectionType: VPC_LINK
                httpMethod: GET
                type: http_proxy
                uri: !Join ["", ["http://", !GetAtt LoadBalancer.DNSName, "/ec2_endpoint"]]
            post:
              x-amazon-apigateway-integration:
                connectionId: !Ref VpcLink
                connectionType: VPC_LINK
                httpMethod: POST
                type: http_proxy
                uri: !Join ["", ["http://", !GetAtt LoadBalancer.DNSName, "/ec2_endpoint"]]  
          /processes:
            get:
              x-amazon-apigateway-integration:
                connectionId: !Ref VpcLink
                connectionType: VPC_LINK
                httpMethod: GET
                type: http_proxy
                uri: !Join ["", ["http://", !GetAtt LoadBalancer.DNSName, "/ec2_endpoint"]]
            post:
              x-amazon-apigateway-integration:
                connectionId: !Ref VpcLink
                connectionType: VPC_LINK
                httpMethod: POST
                type: http_proxy
                uri: !Join ["", ["http://", !GetAtt LoadBalancer.DNSName, "/ec2_endpoint"]]
  MyAuthFunctions:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../authorizer/
      Handler: handler.authorize
      Runtime: python3.8
      Events:
        ApiKey:
          Type: Api
          Properties:
            Path: /
            RestApiId: !Ref Api
            Method: get
            Auth:
              ApiKeyRequired: true