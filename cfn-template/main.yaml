AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: ''
Parameters:
  ### EC2 INSTANCE ###
  StageName:
    Type: String
    Default: Production
    Description: Stage

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    Default: challenge
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues: [t2.micro]
    ConstraintDescription: must be a valid EC2 instance type.

  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0

  AvailabilityZone:
    Type: String
    Default: sa-east-1a
  
  AmiId:
    Type: String
    Default: ami-05331e0d9aa1b9f1c
    Description: AMI id 

  ApiInstancePort:
    Type: String
    Default: 80
    Description: The port on which the EC2 instance is listening
  
  PrivateSubnetCIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 172.31.48.0/20
  
  PublicSubnetIdA:
    Description: Default Public Subnet ID
    Type: String
    Default: subnet-04a6648f9626fec1b

  VpcId:
    Description: Default VPC ID
    Type: String
    Default: vpc-03949decb6924db70

Resources:
  #############################
  # EC2
  #############################

  Agent1EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      Tags: 
        - Key: "Name"
          Value: "Agent"
      InstanceType: !Ref 'InstanceType'
      AvailabilityZone: !Ref AvailabilityZone
      SecurityGroups: [!Ref 'AgentInstanceSecurityGroup']
      Monitoring: true
      KeyName: !Ref 'KeyName'
      ImageId: !Ref 'AmiId'
      UserData: 
        Fn::Base64: !Sub |
          Content-Type: multipart/mixed; boundary="//"
          MIME-Version: 1.0

          --//
          Content-Type: text/cloud-config; charset="us-ascii"
          MIME-Version: 1.0
          Content-Transfer-Encoding: 7bit
          Content-Disposition: attachment; filename="cloud-config.txt"

          #cloud-config
          cloud_final_modules:
          - [scripts-user, always]

          --//
          Content-Type: text/x-shellscript; charset="us-ascii"
          MIME-Version: 1.0
          Content-Transfer-Encoding: 7bit
          Content-Disposition: attachment; filename="userdata.txt"

          #!/bin/bash
          su admin -c "export URL_API = !GetAtt ApiEC2Instance.PublicIp"
          sudo apt update -y
          su admin -c "sudo apt install python3-pip -y"
          cd /home/admin
          su admin -c "wget https://raw.githubusercontent.com/lisazevedo/compliance-continuous-monitoring/main/agent/requirements.txt"
          su admin -c "pip3 install -r requirements.txt"
          su admin -c "wget https://raw.githubusercontent.com/lisazevedo/compliance-continuous-monitoring/main/agent/agent.py"
          --//--

  Agent2EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      Tags: 
        - Key: "Name"
          Value: "Agent"
      InstanceType: !Ref 'InstanceType'
      AvailabilityZone: !Ref AvailabilityZone
      SecurityGroups: [!Ref 'AgentInstanceSecurityGroup']
      Monitoring: true
      KeyName: !Ref 'KeyName'
      ImageId: !Ref 'AmiId'
      UserData: 
        Fn::Base64: !Sub |
          Content-Type: multipart/mixed; boundary="//"
          MIME-Version: 1.0

          --//
          Content-Type: text/cloud-config; charset="us-ascii"
          MIME-Version: 1.0
          Content-Transfer-Encoding: 7bit
          Content-Disposition: attachment; filename="cloud-config.txt"

          #cloud-config
          cloud_final_modules:
          - [scripts-user, always]

          --//
          Content-Type: text/x-shellscript; charset="us-ascii"
          MIME-Version: 1.0
          Content-Transfer-Encoding: 7bit
          Content-Disposition: attachment; filename="userdata.txt"

          #!/bin/bash
          su admin -c "export URL_API = !GetAtt ApiEC2Instance.PublicIp"
          sudo apt update -y
          su admin -c "sudo apt install python3-pip -y"
          cd /home/admin
          su admin -c "wget https://raw.githubusercontent.com/lisazevedo/compliance-continuous-monitoring/main/agent/requirements.txt"
          su admin -c "pip3 install -r requirements.txt"
          su admin -c "wget https://raw.githubusercontent.com/lisazevedo/compliance-continuous-monitoring/main/agent/agent.py"
          --//--

  ApiEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      Tags: 
        - Key: "Name"
          Value: "API"
      InstanceType: !Ref 'InstanceType'
      AvailabilityZone: !Ref AvailabilityZone
      SecurityGroups: [!Ref 'ApiInstanceSecurityGroup']
      Monitoring: true
      KeyName: !Ref 'KeyName'
      ImageId: !Ref 'AmiId'
      UserData: 
        Fn::Base64: !Sub |
          Content-Type: multipart/mixed; boundary="//"
          MIME-Version: 1.0

          --//
          Content-Type: text/cloud-config; charset="us-ascii"
          MIME-Version: 1.0
          Content-Transfer-Encoding: 7bit
          Content-Disposition: attachment; filename="cloud-config.txt"

          #cloud-config
          cloud_final_modules:
          - [scripts-user, always]

          --//
          Content-Type: text/x-shellscript; charset="us-ascii"
          MIME-Version: 1.0
          Content-Transfer-Encoding: 7bit
          Content-Disposition: attachment; filename="userdata.txt"

          #!/bin/bash
          cd /home/admin
          su admin -c "sudo apt-get update -y"
          su admin -c "sudo apt-get install -y ca-certificates -y curl -y git -y gnupg -y lsb-release -y"
          su admin -c "git clone https://github.com/lisazevedo/compliance-continuous-monitoring.git"
          sudo mkdir -p /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
          echo \
          "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \
          $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          su admin -c "sudo apt-get update -y"
          su admin -c "sudo apt-get install docker-ce -y docker-ce-cli -y containerd.io -y docker-compose-plugin -y docker-compose -y"
          su admin -c "sudo systemctl start docker"
          su admin -c "sudo groupadd docker"
          su admin -c "sudo usermod -aG docker $USER"
          su admin -c "source ~/.bashrc"
          git clone https://github.com/lisazevedo/compliance-continuous-monitoring.git
          cd compliance-continuous-monitoring
          docker-compose up -d 
          --//--

  ApiInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP and SSH ports
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref 'SSHLocation'

  AgentInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref 'SSHLocation'

  #############################
  # LOAD BALANCER
  #############################

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VpcId
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnetCIDR
      MapPublicIpOnLaunch: false

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      Port: 80
      Protocol: TCP
      TargetType: instance
      Targets: 
        - Id: !Ref ApiEC2Instance
          Port: !Ref ApiInstancePort
      VpcId: !Ref VpcId

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internal
      Subnets: 
        - !Ref PrivateSubnet
      Type: network

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      DefaultActions: 
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: TCP

  VpcLink:
    Type: AWS::ApiGateway::VpcLink
    Properties: 
      Name: vpc-link
      TargetArns: 
        - !Ref LoadBalancer

#############################
# API
#############################

  Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref StageName
      Cors:
        AllowMethods: "'GET,POST,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
      DefinitionBody:
        swagger: 2.0
        paths:
          /users:
            get:
              x-amazon-apigateway-integration:
                connectionId: !Ref VpcLink
                connectionType: VPC_LINK
                httpMethod: GET
                type: http_proxy
                uri: !Join ["", ["http://", !GetAtt LoadBalancer.DNSName, "/users"]]
            post:
              x-amazon-apigateway-integration:
                connectionId: !Ref VpcLink
                connectionType: VPC_LINK
                httpMethod: POST
                type: http_proxy
                uri: !Join ["", ["http://", !GetAtt LoadBalancer.DNSName, "/users"]]
          /cpus:
            get:
              x-amazon-apigateway-integration:
                connectionId: !Ref VpcLink
                connectionType: VPC_LINK
                httpMethod: GET
                type: http_proxy
                uri: !Join ["", ["http://", !GetAtt LoadBalancer.DNSName, "/cpus"]]
            post:
              x-amazon-apigateway-integration:
                connectionId: !Ref VpcLink
                connectionType: VPC_LINK
                httpMethod: POST
                type: http_proxy
                uri: !Join ["", ["http://", !GetAtt LoadBalancer.DNSName, "/cpus"]]
          /hosts:
            get:
              x-amazon-apigateway-integration:
                connectionId: !Ref VpcLink
                connectionType: VPC_LINK
                httpMethod: GET
                type: http_proxy
                uri: !Join ["", ["http://", !GetAtt LoadBalancer.DNSName, "/hosts"]]
            post:
              x-amazon-apigateway-integration:
                connectionId: !Ref VpcLink
                connectionType: VPC_LINK
                httpMethod: POST
                type: http_proxy
                uri: !Join ["", ["http://", !GetAtt LoadBalancer.DNSName, "/hosts"]]  
          /processes:
            get:
              x-amazon-apigateway-integration:
                connectionId: !Ref VpcLink
                connectionType: VPC_LINK
                httpMethod: GET
                type: http_proxy
                uri: !Join ["", ["http://", !GetAtt LoadBalancer.DNSName, "/processes"]]
            post:
              x-amazon-apigateway-integration:
                connectionId: !Ref VpcLink
                connectionType: VPC_LINK
                httpMethod: POST
                type: http_proxy
                uri: !Join ["", ["http://", !GetAtt LoadBalancer.DNSName, "/processes"]]
