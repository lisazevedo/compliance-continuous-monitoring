AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: 'AWS CloudFormation Sample Template EC2InstanceWithSecurityGroupSample:
  Create an Amazon EC2 instance running the Debian AMI.'
Parameters:
  ### EC2 INSTANCE ###
  StageName:
    Type: String
    Default: Production
    Description: Stage

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    Default: challenge
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues: [t2.micro]
    ConstraintDescription: must be a valid EC2 instance type.

  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0

  AvailabilityZone:
    Type: String
    Default: sa-east-1a

  InstancePort:
    Type: String
    Default: 80
    Description: The port on which the EC2 instance is listening

  PublicSubnetId:
    Description: Default Public Subnet ID
    Type: String
    Default: subnet-0e8d1c1f6a31976af

  VpcId:
    Description: Default VPC ID
    Type: String
    Default: vpc-03949decb6924db70

Resources:
  #############################
  # EC2
  #############################

  AgentASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PublicSubnetId
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: '2'
      MaxSize: '2'
      DesiredCapacity: '2'

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-05331e0d9aa1b9f1c
      SecurityGroups: [!Ref 'AgentInstanceSecurityGroup']
      InstanceType: t2.micro

  # AgentEC2Instance:
  #   Type: AWS::EC2::Instance
  #   Properties:
  #     Tags: 
  #       - Key: "Name"
  #         Value: "Agent"
  #     InstanceType: !Ref 'InstanceType'
  #     AvailabilityZone: !Ref AvailabilityZone
  #     SecurityGroups: [!Ref 'AgentInstanceSecurityGroup']
  #     Monitoring: true
  #     KeyName: !Ref 'KeyName'
  #     ImageId: 'ami-05331e0d9aa1b9f1c'

  ApiEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      Tags: 
        - Key: "Name"
          Value: "API"
      InstanceType: !Ref 'InstanceType'
      AvailabilityZone: !Ref AvailabilityZone
      SecurityGroups: [!Ref 'ApiInstanceSecurityGroup']
      Monitoring: true
      KeyName: !Ref 'KeyName'
      ImageId: 'ami-05331e0d9aa1b9f1c'

  ApiInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP and SSH ports
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref 'SSHLocation'

  AgentInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref 'SSHLocation'

  #############################
  # LOAD BALANCER
  #############################
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets: 
        - !Ref PublicSubnetId
      Type: network

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      Port: 80
      Protocol: TCP
      TargetType: instance
      Targets: 
        - Id: !Ref ApiEC2Instance
          Port: !Ref InstancePort
      VpcId: !Ref VpcId

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      DefaultActions: 
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: TCP

  VpcLink:
    Type: AWS::ApiGateway::VpcLink
    Properties: 
      Name: vpc-link
      TargetArns: 
        - !Ref LoadBalancer

  #############################
  # API
  #############################

  Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref StageName
      Auth:
        Authorizers:
          MyLambdaAuthorizer:
            FunctionArn: !GetAtt AuthFunctions.Arn
            FunctionPayloadType: TOKEN
            Identity:
              # Must specify at least one of
              # Headers, QueryStrings, StageVariables, or Context
              Headers:
                - authorizationToken
              ReauthorizeEvery: 100
      Cors:
        AllowMethods: "'GET,POST,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
      DefinitionBody:
        swagger: 2.0
        paths:
          /users:
            get:
              x-amazon-apigateway-integration:
                connectionId: !Ref VpcLink
                connectionType: VPC_LINK
                httpMethod: GET
                type: http_proxy
                uri: !Join ["", ["http://", !GetAtt LoadBalancer.DNSName, "/ec2_endpoint"]]
            post:
              x-amazon-apigateway-integration:
                connectionId: !Ref VpcLink
                connectionType: VPC_LINK
                httpMethod: POST
                type: http_proxy
                uri: !Join ["", ["http://", !GetAtt LoadBalancer.DNSName, "/ec2_endpoint"]]
          /cpus:
            get:
              x-amazon-apigateway-integration:
                connectionId: !Ref VpcLink
                connectionType: VPC_LINK
                httpMethod: GET
                type: http_proxy
                uri: !Join ["", ["http://", !GetAtt LoadBalancer.DNSName, "/ec2_endpoint"]]
            post:
              x-amazon-apigateway-integration:
                connectionId: !Ref VpcLink
                connectionType: VPC_LINK
                httpMethod: POST
                type: http_proxy
                uri: !Join ["", ["http://", !GetAtt LoadBalancer.DNSName, "/ec2_endpoint"]]
          /hosts:
            get:
              x-amazon-apigateway-integration:
                connectionId: !Ref VpcLink
                connectionType: VPC_LINK
                httpMethod: GET
                type: http_proxy
                uri: !Join ["", ["http://", !GetAtt LoadBalancer.DNSName, "/ec2_endpoint"]]
            post:
              x-amazon-apigateway-integration:
                connectionId: !Ref VpcLink
                connectionType: VPC_LINK
                httpMethod: POST
                type: http_proxy
                uri: !Join ["", ["http://", !GetAtt LoadBalancer.DNSName, "/ec2_endpoint"]]  
          /processes:
            get:
              x-amazon-apigateway-integration:
                connectionId: !Ref VpcLink
                connectionType: VPC_LINK
                httpMethod: GET
                type: http_proxy
                uri: !Join ["", ["http://", !GetAtt LoadBalancer.DNSName, "/ec2_endpoint"]]
            post:
              x-amazon-apigateway-integration:
                connectionId: !Ref VpcLink
                connectionType: VPC_LINK
                httpMethod: POST
                type: http_proxy
                uri: !Join ["", ["http://", !GetAtt LoadBalancer.DNSName, "/ec2_endpoint"]]

  AuthFunctions:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../authorizer/
      Handler: handler.authorize
      Runtime: python3.8
      Events:
        ApiKey:
          Type: Api
          Properties:
            Path: /
            RestApiId: !Ref Api
            Method: get
            Auth:
              ApiKeyRequired: true

  ApiUsagePlan:
    Type: 'AWS::ApiGateway::UsagePlan'
    Properties:
      ApiStages:
        - ApiId: !Ref Api
          Stage: !Ref StageName
      Description: API usage plan
      Quota:
        Limit: 5000
        Period: MONTH
      Throttle:
        BurstLimit: 200
        RateLimit: 100
      UsagePlanName: Plan_API

  ApiKey:
    Type: 'AWS::ApiGateway::ApiKey'
    Properties:
      Name: AgentKey
      Description: CloudFormation API Key V1
      Enabled: true
      StageKeys:
        - RestApiId: !Ref Api
          StageName: !Ref StageName

  usagePlanKey:
    Type: 'AWS::ApiGateway::UsagePlanKey'
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref ApiUsagePlan
