AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS CloudFormation Sample Template EC2InstanceWithSecurityGroupSample:
  Create an Amazon EC2 instance running the Debian AMI.'
Parameters:
  ### EC2 INSTANCE ###
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues: [t2.micro]
    ConstraintDescription: must be a valid EC2 instance type.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
  DBLocation:
    Description: The IP address range that can be used 3306 to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  AvailabilityZone:
    Type: String
    Default: sa-east-1a

  VpcId:
    Type: String
    Description: The ID of the VPC containing the EC2 instance

  InstancePort:
    Type: String
    Default: 80
    Description: The port on which the EC2 instance is listening

  Subnet:
    Type: String
    Description: The ID of the subnet containing the EC2 instance

Resources:
  ### EC2 INSTANCE ###
  AgentEC2Instance1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref 'InstanceType'
      AvailabilityZone: !Ref AvailabilityZone
      SecurityGroups: [!Ref 'InstanceSecurityGroup']
      KeyName: !Ref 'KeyName'
      ImageId: 'ami-05331e0d9aa1b9f1c'
      UserData:
        Fn::Base64: 
          !Sub |
            #!/bin/bash
            sudo apt update
            sudo apt install git python3-pip -y
            wget https://raw.githubusercontent.com/lisazevedo/compliance-continuous-monitoring/main/agent/requirements.txt
            pip3 install -r requirements.txt
            wget https://raw.githubusercontent.com/lisazevedo/compliance-continuous-monitoring/main/agent/agent.py
  AgentEC2Instance2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref 'InstanceType'
      AvailabilityZone: !Ref AvailabilityZone
      SecurityGroups: [!Ref 'InstanceSecurityGroup']
      KeyName: !Ref 'KeyName'
      ImageId: 'ami-05331e0d9aa1b9f1c'
      UserData:
        Fn::Base64: 
          !Sub |
            #!/bin/bash
            sudo apt update
            sudo apt install git python3-pip -y
            wget https://raw.githubusercontent.com/lisazevedo/compliance-continuous-monitoring/main/agent/requirements.txt
            pip3 install -r requirements.txt
            wget https://raw.githubusercontent.com/lisazevedo/compliance-continuous-monitoring/main/agent/agent.py
  ApiEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref 'InstanceType'
      AvailabilityZone: !Ref AvailabilityZone
      SecurityGroups: [!Ref 'DBInstanceSecurityGroup']
      KeyName: !Ref 'KeyName'
      ImageId: 'ami-05331e0d9aa1b9f1c'
      UserData:
        "Fn::Base64": 
          !Sub |
            #!/bin/bash
            sudo apt update
            sudo apt-get install \
              ca-certificates \
              curl \
              git \
              gnupg \
              lsb-release
            sudo mkdir -p /etc/apt/keyrings
            curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
            echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \
            $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt-get update
            sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin docker-compose
            sudo groupadd docker
            sudo usermod -aG docker $USER
            git clone https://github.com/lisazevedo/compliance-continuous-monitoring.git
            docker-compose up -d compliance-continuous-monitoring

  DBInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable 3306 PORT
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        CidrIp: !Ref 'DBLocation'
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref 'SSHLocation'
  ### EC2 INSTANCE SECURITY GROUP ###

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      Port: 80
      Protocol: TCP
      TargetType: instance
      Targets: 
        - Id: !Ref ApiEC2Instance
          Port: !Ref InstancePort
      VpcId: !Ref VpcId

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internal
      Subnets: 
        - !Ref Subnet
      Type: network

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      DefaultActions: 
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: TCP

  VpcLink:
    Type: AWS::ApiGateway::VpcLink
    Properties: 
      Name: vpc-link
      TargetArns: 
        - !Ref LoadBalancer

  #############################
  # API
  #############################

  Api:
    Type: AWS::Serverless::Api
    Properties:
      Auth:
        ApiKeyRequired: true 
      StageName: production
      Cors:
        AllowMethods: "'GET,POST,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
      DefinitionBody:
        swagger: 2.0
        paths:
          /api_endpoint:
            get:
              x-amazon-apigateway-integration:
                connectionId: !Ref VpcLink
                connectionType: VPC_LINK
                httpMethod: GET
                type: http_proxy
                uri: !Join ["", ["http://", !GetAtt LoadBalancer.DNSName, "/ec2_endpoint"]]
            post:
              x-amazon-apigateway-integration:
                connectionId: !Ref VpcLink
                connectionType: VPC_LINK
                httpMethod: POST
                type: http_proxy
                uri: !Join ["", ["http://", !GetAtt LoadBalancer.DNSName, "/ec2_endpoint"]]
  MyFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: index.handler
      Runtime: Python3.x
      Events:
        ApiKey:
          Type: Api
          Properties:
            RestApiId: !Ref ApiKey
            Path: /
            Method: get
            Auth:
              ApiKeyRequired: true
  ApiKey: 
    Type: AWS::ApiGateway::ApiKey
    Properties: 
      Name: !Join ["", [{"Ref": "AWS::StackName"}, "-apikey"]]
      Description: "CloudFormation API Key V1"
      Enabled: true
      GenerateDistinctId: false
  ApiUsagePlan:
    Type: "AWS::ApiGateway::UsagePlan"
    Properties:
      ApiStages: 
      - ApiId: !Ref Api
        Stage: !Ref production    
      Description: !Join [" ", [{"Ref": "AWS::StackName"}, "usage plan"]]
      Quota:
        Limit: 2000
        Period: MONTH
      Throttle:
        BurstLimit: 10
        RateLimit: 10
      UsagePlanName: !Join ["", [{"Ref": "AWS::StackName"}, "-usage-plan"]]
  ApiUsagePlanKey:
    Type: "AWS::ApiGateway::UsagePlanKey"
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref ApiUsagePlan